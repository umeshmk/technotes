(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{450:function(e,t,a){"use strict";a.r(t);var r=a(45),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker-swarm-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-swarm-network"}},[e._v("#")]),e._v(" Docker swarm Network")]),e._v(" "),a("ul",[a("li",[e._v("https://docs.docker.com/engine/swarm/networking/")])]),e._v(" "),a("h4",{attrs:{id:"traffic-2-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traffic-2-types"}},[e._v("#")]),e._v(" "),a("em",[e._v("Traffic")]),e._v(" - 2 types")]),e._v(" "),a("ul",[a("li",[e._v("1] "),a("code",[e._v("control & management")]),e._v(" "),a("ul",[a("li",[e._v("management msg like join/leave swarm, etc.")]),e._v(" "),a("li",[e._v("always encrypted")])])]),e._v(" "),a("li",[e._v("2] "),a("code",[e._v("application data")]),e._v(" "),a("ul",[a("li",[e._v("between containers")]),e._v(" "),a("li",[e._v("to & from external clients")])])])]),e._v(" "),a("h4",{attrs:{id:"networks-3-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networks-3-types"}},[e._v("#")]),e._v(" "),a("em",[e._v("Networks")]),e._v(" - 3 types")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("1] "),a("code",[e._v("overlay")])]),e._v(" "),a("ul",[a("li",[e._v("uses overlay driver")]),e._v(" "),a("li",[e._v("between "),a("em",[e._v("docker daemons")]),e._v(" in swarm")]),e._v(" "),a("li",[e._v("created same way as in non-swarm standalone containers")]),e._v(" "),a("li",[e._v("attach a "),a("em",[e._v("service")]),e._v(" with\n"),a("ul",[a("li",[a("em",[e._v("1...n existing")]),e._v(" overlay networks for "),a("code",[e._v("service to service")]),e._v(" communications")])])])])]),e._v(" "),a("li",[a("p",[e._v("2] "),a("code",[e._v("Ingress")])]),e._v(" "),a("ul",[a("li",[e._v("A "),a("em",[e._v("special")]),e._v(" overlay network")]),e._v(" "),a("li",[a("em",[e._v("load balancing")]),e._v(" among service's nodes")]),e._v(" "),a("li",[a("em",[e._v("created automatically")]),e._v(" on swarm init or join")]),e._v(" "),a("li",[e._v("mostly no need to customize manually")]),e._v(" "),a("li",[e._v("working\n"),a("ul",[a("li",[e._v("a request is received on any node's published "),a("em",[e._v("port")])]),e._v(" "),a("li",[e._v("request is send to "),a("em",[e._v("IPVS")])]),e._v(" "),a("li",[a("em",[e._v("IPVS")]),e._v(" keeps track of "),a("code",[e._v("IP")]),e._v(" addresses providing that service")]),e._v(" "),a("li",[e._v("selects any 1 "),a("code",[e._v("IP")]),e._v(" & sends request")])])])])]),e._v(" "),a("li",[a("p",[e._v("3] "),a("code",[e._v("docker_gwbridge")])]),e._v(" "),a("ul",[a("li",[e._v("a bridge network")]),e._v(" "),a("li",[e._v("connects "),a("code",[e._v("overlay")]),e._v(" & "),a("code",[e._v("ingress")]),e._v(" to an individual docker daemon's physical network.")]),e._v(" "),a("li",[a("em",[e._v("created automatically")]),e._v(" on swarm init or join")]),e._v(" "),a("li",[e._v("mostly no need to customize manually")])])])]),e._v(" "),a("h4",{attrs:{id:"firewall-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#firewall-considerations"}},[e._v("#")]),e._v(" Firewall considerations")]),e._v(" "),a("ul",[a("li",[e._v("All Docker daemons in a swarm communicates with each other on ports\n"),a("ul",[a("li",[a("code",[e._v("2376")]),e._v(" TCP \t\t#Docker Machine")]),e._v(" "),a("li",[a("code",[e._v("2377")]),e._v(" TCP\t\t#cluster management communications(only on manager node)")]),e._v(" "),a("li",[a("code",[e._v("7946")]),e._v(" TCP/UDP\t#container network discovery / communication among nodes")]),e._v(" "),a("li",[a("code",[e._v("4789")]),e._v(" UDP \t\t#container overlay network traffic")])])])]),e._v(" "),a("h4",{attrs:{id:"overlay-network-cheatsheet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overlay-network-cheatsheet"}},[e._v("#")]),e._v(" Overlay Network - Cheatsheet")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("\tdocker network create --driver overlay <network-name>\n\tdocker network create --driver overlay --subnet 10.0.9.0/24 --gateway 10.0.9.99 <network-name>\n\n\tdocker service create --network <network-name>\t#connect service to <network-name>\n\tdocker network inspect <network-name>\t\t\t#inspection\n")])])]),a("h4",{attrs:{id:"configure-subnet-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-subnet-gateway"}},[e._v("#")]),e._v(" Configure Subnet & Gateway")]),e._v(" "),a("ul",[a("li",[e._v("configured automatically on creating overlay network")])])])}),[],!1,null,null,null);t.default=n.exports}}]);