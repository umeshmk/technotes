(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{382:function(e,a,t){"use strict";t.r(a);var v=t(45),i=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"data-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-structure"}},[e._v("#")]),e._v(" Data structure")]),e._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("ul",[t("li",[e._v("Data structure organizes data. A good DS is a good algorithm.")]),e._v(" "),t("li",[t("em",[e._v("Most common")]),e._v(" "),t("ul",[t("li",[e._v("Array")]),e._v(" "),t("li",[e._v("Linked list")]),e._v(" "),t("li",[e._v("Stack")]),e._v(" "),t("li",[e._v("Queue")]),e._v(" "),t("li",[e._v("Graph")]),e._v(" "),t("li",[e._v("Tree")]),e._v(" "),t("li",[e._v("Hashtables")])])]),e._v(" "),t("li",[e._v("Some DS can be used to create another DS\n"),t("ul",[t("li",[e._v("Linked list is used to create a stack and queue DS.")])])]),e._v(" "),t("li",[e._v("Each DS has its own set of operations.")])]),e._v(" "),t("h2",{attrs:{id:"linked-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[e._v("#")]),e._v(" Linked list")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/Linkedlist.png?raw=1",alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("Similar to "),t("em",[e._v("Array")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("Array")]),e._v(" -> data is stored contigously in memory")]),e._v(" "),t("li",[t("em",[e._v("Linked list")]),e._v(" -> Data need not be continous")])])]),e._v(" "),t("li",[e._v("Hence, "),t("em",[e._v("Linked List")]),e._v(" can insert/remove without reallocation or reorganisation.")]),e._v(" "),t("li",[t("strong",[e._v("Drawbacks")]),e._v(" "),t("ul",[t("li",[e._v("Random access not allowed. Only from start.")]),e._v(" "),t("li",[e._v("Cannot do binary search.")]),e._v(" "),t("li",[e._v("Needs extra space.")])])]),e._v(" "),t("li",[t("strong",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[e._v("Its a fundamental DS for "),t("em",[e._v("stack, tree, queue, graph")])])])])]),e._v(" "),t("h2",{attrs:{id:"stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" Stack")]),e._v(" "),t("ul",[t("li",[e._v("Create using "),t("em",[e._v("Array")]),e._v(" or "),t("em",[e._v("Linked List")])]),e._v(" "),t("li",[t("code",[e._v("LIFO")]),e._v(" -> Last In First Out")]),e._v(" "),t("li",[t("em",[e._v("push")]),e._v(" & "),t("em",[e._v("pop")]),e._v(" operations can be performed.")]),e._v(" "),t("li",[t("strong",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("Undo/redo")]),e._v(" functions.")])])])]),e._v(" "),t("h2",{attrs:{id:"queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[e._v("#")]),e._v(" Queue")]),e._v(" "),t("ul",[t("li",[e._v("Create using "),t("em",[e._v("Array")]),e._v(" or "),t("em",[e._v("Linked List")])]),e._v(" "),t("li",[t("code",[e._v("FIFO")]),e._v(" -> First In First Out")]),e._v(" "),t("li",[t("strong",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("Printer")]),e._v(", "),t("em",[e._v("Call center")]),e._v(" calls, etc")])])])]),e._v(" "),t("h2",{attrs:{id:"graph"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graph"}},[e._v("#")]),e._v(" Graph")]),e._v(" "),t("ul",[t("li",[e._v("Set of "),t("em",[e._v("nodes")]),e._v(" (vertex) and its "),t("em",[e._v("connections")]),e._v(" (edges)")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/graph.png?raw=1",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"binary-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binary-tree"}},[e._v("#")]),e._v(" Binary Tree")]),e._v(" "),t("ul",[t("li",[e._v("Interconnected nodes.\n"),t("ul",[t("li",[e._v("Topmost = "),t("em",[e._v("root")])]),e._v(" "),t("li",[e._v("Below root = "),t("em",[e._v("childrens")])]),e._v(" "),t("li",[e._v("No children = "),t("em",[e._v("leaves")])])])]),e._v(" "),t("li",[e._v("1 Node can have max 2 childrens. Hence called "),t("em",[e._v("Binary")])]),e._v(" "),t("li",[t("em",[e._v("Height")]),e._v(" = No of nodes from root to leaves")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/tree3.png?raw=1",alt:""}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Types")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("FULL")]),e._v(" - Each node has 2 childrens")]),e._v(" "),t("li",[t("em",[e._v("COMPLETE")]),e._v(" - Each levels are filled. Except last level")]),e._v(" "),t("li",[t("em",[e._v("PERFECT")]),e._v(" - Each node has 2 childrens. All leaves at same levels")])])]),e._v(" "),t("li",[t("strong",[e._v("Advantage")]),e._v(" "),t("ul",[t("li",[e._v("Hierarchies relationship")]),e._v(" "),t("li",[e._v("Good insert")]),e._v(" "),t("li",[e._v("Good search")]),e._v(" "),t("li",[e._v("Easy to get subtree")])])]),e._v(" "),t("li",[t("strong",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("Binary Search Tree")]),e._v(" in search applications")])])])]),e._v(" "),t("h2",{attrs:{id:"hash-tables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash-tables"}},[e._v("#")]),e._v(" Hash Tables")]),e._v(" "),t("ul",[t("li",[e._v("Key-value")]),e._v(" "),t("li",[e._v("Hash is a unique value. eg: Student id, Book number, etc")]),e._v(" "),t("li",[t("em",[e._v("Hash function")]),e._v(" "),t("ul",[t("li",[e._v("Maps dataset(anysize) to fixed size dataset.")]),e._v(" "),t("li",[e._v("Return values are called "),t("em",[e._v("hashes")])]),e._v(" "),t("li",[e._v("Unique hash for each elements in dataset")])])]),e._v(" "),t("li",[t("em",[e._v("Disadvantage")]),e._v(" "),t("ul",[t("li",[e._v("Bad for ordering and sorting data.")])])]),e._v(" "),t("li",[t("em",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[e._v("Associative arrays")]),e._v(" "),t("li",[e._v("Database indexing")])])])]),e._v(" "),t("h2",{attrs:{id:"matrix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#matrix"}},[e._v("#")]),e._v(" Matrix")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("2-d")]),e._v(" arrays having "),t("em",[e._v("rows")]),e._v(" and "),t("em",[e._v("columns")])]),e._v(" "),t("li",[t("code",[e._v("6x3")]),e._v(" matrix = 6 "),t("em",[e._v("rows")]),e._v(" and 3 "),t("em",[e._v("columns")])]),e._v(" "),t("li",[t("strong",[e._v("Usage")]),e._v(" "),t("ul",[t("li",[e._v("Digital image -> Each pixel has its color value")]),e._v(" "),t("li",[e._v("Digital video")]),e._v(" "),t("li",[e._v("Digital sound")])])]),e._v(" "),t("li",[t("em",[e._v("Operations")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/matrix.png?raw=1",alt:""}})])])}),[],!1,null,null,null);a.default=i.exports}}]);