(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{449:function(e,a,s){"use strict";s.r(a);var n=s(45),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"basics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basics"}},[e._v("#")]),e._v(" Basics")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Multiple machines(real/virtual) combines to form cluster called "),s("code",[e._v("swarm")])])]),e._v(" "),s("li",[s("p",[e._v("docker-machine is preinstalled in mac & windows")])]),e._v(" "),s("li",[s("p",[e._v("Linux : see "),s("code",[e._v("install.sh")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("config.json")]),e._v(" , "),s("code",[e._v("certificates")]),e._v(" , "),s("code",[e._v("data")]),e._v(" etc for each "),s("em",[e._v("virtual machine")]),e._v(" craated  by docker-machine")]),e._v(" "),s("ul",[s("li",[e._v("stored in "),s("code",[e._v("~/.docker/machine/machines")])]),e._v(" "),s("li",[e._v("modifiying them is NOT RECOMMENDED")])])])]),e._v(" "),s("h5",{attrs:{id:"create-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-cluster"}},[e._v("#")]),e._v(" Create cluster")]),e._v(" "),s("ul",[s("li",[e._v("On local install "),s("code",[e._v("VirtualBox")])]),e._v(" "),s("li",[e._v("On DigitalOcean, AWS, Azure etc. use respected drivers [https://docs.docker.com/machine/drivers/]")])]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"ingress-network-why-service-is-available-on-all-myvm-nodes-ip-port"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ingress-network-why-service-is-available-on-all-myvm-nodes-ip-port"}},[e._v("#")]),e._v(" Ingress Network : Why service is available on all myVM nodes "),s("code",[e._v("ip:port")])]),e._v(" "),s("ul",[s("li",[e._v("swarm has nodes "),s("code",[e._v("myVM")])]),e._v(" "),s("li",[e._v("nodes run services as per "),s("code",[e._v("YAML")])]),e._v(" "),s("li",[e._v("services has "),s("code",[e._v("1-n")]),e._v(" containers(replications)")]),e._v(" "),s("li",[e._v("a node may have "),s("code",[e._v("0-n containers")]),e._v(" of this service (see docker visualizer)")]),e._v(" "),s("li",[e._v("service is available on "),s("code",[e._v("<port>")]),e._v("of all nodes in swarm even if it has "),s("code",[e._v("0 container")]),e._v(" for that service")])]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"cheatsheet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cheatsheet"}},[e._v("#")]),e._v(" cheatsheet")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('docker-machine create --driver <driver> <myVM>                                      # create virtual machine\n\ndocker-machine ls                                                                   # list machines\n\ndocker-machine ssh <myVM>                                                           # Open an SSH session with the VM; type "exit" to end    \ndocker-machine ssh <myVM> "docker swarm init --advertise-addr <myVM-ip>"            # swarm init [manager node]\ndocker-machine ssh <myVM> "docker swarm join --token <token> <manager-ip:2377>"     # swarm join [worker nodes]\ndocker-machine ssh <myVM> "docker node ls"                                          # list nodes in swarm [run on manager only]\ndocker-machine ssh <myVM> "docker node inspect <node ID>"                           # Inspect a node\ndocker-machine ssh <myVM> "docker swarm join-token -q worker"                       # View join token\ndocker-machine ssh <myVM> "docker stack deploy -c <file> <app>"                     # Deploy an app\n\ndocker-machine env <myVM>                                                           # local shell talks to node & can use local files(docker-compose.yml) too without copying to <myVM>\n\ndocker-machine scp docker-compose.yml <myVM>:~                                      # Copy file to node\'s home dir\n\ndocker-machine start <myVM>                                                         # Start a VM that is currently not running\ndocker-machine stop $(docker-machine ls -q)                                         # Stop all running VMs\n\n\ndocker-machine ssh <myVM> "docker swarm leave"                                      # Make the worker leave the swarm\ndocker-machine ssh <myVM> "docker swarm leave -f"                                   # Make only master leave, kill swarm\n\ndocker-machine rm <myVM>                                                            # Remove 1 machine\ndocker-machine rm $(docker-machine ls -q)                                           # Remove all VMs and their disk images\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);