(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{453:function(e,s,t){"use strict";t.r(s);var r=t(45),a=Object(r.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("URL - https://docs.docker.com/engine/swarm/services/")]),e._v(" "),t("ul",[t("li",[t("p",[t("em",[e._v("scaling")]),e._v(" and "),t("em",[e._v("load-balancing")])])]),e._v(" "),t("li",[t("p",[e._v("eg : services like - DB - Redis - front-end - back-end")])]),e._v(" "),t("li",[t("p",[e._v("Multiple machines(real/virtual) combines to form cluster called "),t("code",[e._v("swarm")])])]),e._v(" "),t("li",[t("p",[e._v("Each machines is a "),t("code",[e._v("node")])])]),e._v(" "),t("li",[t("p",[e._v("Each node has n tasks(replications)")])]),e._v(" "),t("li",[t("p",[e._v("1 task has 1 container")])]),e._v(" "),t("li",[t("p",[e._v("Containers are "),t("code",[e._v("services")]),e._v(" (in production)")])]),e._v(" "),t("li",[t("p",[e._v("Service(container) run only 1 docker-image")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker-compose.yml")]),e._v(" / "),t("code",[e._v("docker-stack.yml")]),e._v(" defines multiple services")])]),e._v(" "),t("li",[t("p",[e._v("version: 3 only supports swarm-mode")])]),e._v(" "),t("li",[t("p",[t("em",[e._v("swarm")]),e._v(" has "),t("em",[e._v("manager-node")]),e._v(" & "),t("em",[e._v("worker-nodes")])])]),e._v(" "),t("li",[t("p",[t("em",[e._v("swarm")]),e._v(" starts "),t("em",[e._v("services")]),e._v(" which has "),t("em",[e._v("tasks")]),e._v(" which creates "),t("em",[e._v("containers")])]),e._v(" "),t("ul",[t("li",[t("em",[t("code",[e._v("manager-node")])]),e._v(" "),t("ul",[t("li",[e._v("only 1 per swarm")]),e._v(" "),t("li",[e._v("manages everything in swarm")]),e._v(" "),t("li",[e._v("we talk to manager")])])]),e._v(" "),t("li",[t("em",[t("code",[e._v("worker-nodes")])]),e._v(" "),t("ul",[t("li",[e._v("multiple as we want")]),e._v(" "),t("li",[e._v("we do not, but manager talks to each node")])])])])])]),e._v(" "),t("h2",{attrs:{id:"service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[e._v("#")]),e._v(" Service")]),e._v(" "),t("p",[t("em",[e._v("eg:")]),e._v("\ndocker service create --name my_nginxservice nginx # use docker--compose.yml file\ndocker service update --publish-add 80 my_nginxservice # update"),t("br"),e._v("\ndocker service remove my_nginxservice # remove service\n// configure\n--name "),t("myname",[e._v("\n--env "),t("MYVAR",[e._v("="),t("myvalue",[e._v(" # environment variable\n--workdir "),t("br"),e._v("\n--user <my_user>\n// publish ports[service port -> to hostpc outside swarm]\n// 2 ways:\na] routing mesh # published "),t("service",{attrs:{port:""}},[e._v(" is accessible at "),t("target",{attrs:{port:""}},[e._v(" on every node even if that node has 0 tasks of this service.(eg nginx works on all node's "),t("ip",[e._v(") # less complex and right choice for many services.\n--publish "),t("target",{attrs:{post:""}},[e._v(":"),t("service",{attrs:{port:""}},[e._v("\nb] manually # open port only on required node "),t("ip",[e._v(" & not all nodes. # bypasses mesh routing # flexible # managed manually\n--publish mode=host, "),t("target",{attrs:{post:""}},[e._v(":"),t("service",{attrs:{port:""}},[e._v("\n// Overlay network # connect 1 or n services "),t("em",[e._v("within")]),e._v(" swarm # create on manager node\ndocker network create --driver overlay "),t("mynetwork",[e._v(" # all manager nodes have access to "),t("mynetwork",[e._v("\ndocker service create --replicas 3 --network "),t("mynetwork",[e._v(" --name my-web nginx # swarm extends "),t("mynetwork",[e._v(" to each node running the service")])],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),t("p",[e._v("// Scaling\na] replicated # n task on swarm's any or all nodes (n = 0..n) # default mode\ndocker service create --replicas 3 nginx\nb] global # 1 task per node\ndocker service create --mode global nginx\n// volumes or bind mounts # create: use --mount for both types # update: use --mount-add or --mount-rm # volumes # better than bind # remains even ofter container is removed\ndocker create service --mount src="),t("myVol",[e._v(",destination="),t("container-path",[e._v(" # bind # src is from host path\ndocker service create --mount type=bind,src="),t("hostpath",[e._v(",dst="),t("container-apth",[e._v(",readonly --name myservice nginx")])],1)],1)],1)],1),e._v(" "),t("h2",{attrs:{id:"cheatsheet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cheatsheet"}},[e._v("#")]),e._v(" Cheatsheet")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("    docker swarm init               "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# makes current machine a node-manager in swarm")]),e._v("\n    docker swarm init --advertise-addr "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("myVM-ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    docker swarm "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" --token "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("token"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("manager-ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("port"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# run this cmd on worker node to join swarm")]),e._v("\n    docker stack deploy -c "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("docker-compose.yml"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("mystack"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# deploys or updates mystack")]),e._v("\n\n    docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# list services")]),e._v("\n    docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("serviceID"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# list tasks in this service")]),e._v("\n\n    docker inspect --format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{{.Status.ContainerStatus.ContainerID}}'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Gives container-ID for this task")]),e._v("\n    docker inspect --format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{{index .Config.labels "),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("com.docker.swarm.task.id"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("}}'")]),e._v("'"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Gives taks-ID")]),e._v("\n\n    docker stack "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("mystack"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# stop & removes mystack from swarm")]),e._v("\n    docker swarm leave              "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# worker-nodes")]),e._v("\n    docker swarm leave --force      "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# manager-node")]),e._v("\n\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);