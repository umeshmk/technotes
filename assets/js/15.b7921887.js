(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{380:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"big-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#big-o"}},[t._v("#")]),t._v(" Big O")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("Ref - Cracking the coding interview")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Metric for efficiency of "),a("strong",[t._v("algorithms runtime")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Example")])]),t._v(" "),a("ul",[a("li",[a("em",[t._v("Travel or download data")]),t._v(" "),a("ul",[a("li",[t._v("Travel - Use airplane, car, etc")]),t._v(" "),a("li",[t._v("Download - using internet, ftp, email, etc")])])]),t._v(" "),a("li",[a("em",[t._v("data size ?")]),t._v(" "),a("ul",[a("li",[t._v("Big (lots of TB ) - airplane is faster")]),t._v(" "),a("li",[t._v("Small - email is faster")])])]),t._v(" "),a("li",[a("em",[t._v("Big O ?")]),t._v(" "),a("ul",[a("li",[t._v("Electronic - O(size)` - Time is linear with size of file.")]),t._v(" "),a("li",[t._v("Airplane - O(1)` - Time is constant (size don't matter)")])])])])])]),t._v(" "),a("h2",{attrs:{id:"time-complexity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-complexity"}},[t._v("#")]),t._v(" Time Complexity")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Runtimes list")]),t._v(" (Not fixed)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("O(log N)")])]),t._v(" "),a("li",[a("code",[t._v("O(N log N)")])]),t._v(" "),a("li",[a("code",[t._v("O(N)")])]),t._v(" "),a("li",[a("code",[t._v("O(N^2)")]),t._v(" (n square)")]),t._v(" "),a("li",[t._v("O(2"),a("sup",[t._v("N")]),t._v(") (2 raise to N)")]),t._v(" "),a("li",[a("code",[t._v("O(x)")])]),t._v(" "),a("li",[a("code",[t._v("O(xy)")]),t._v(" ( any variables)")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Best / Worst / Expected case")])]),t._v(" "),a("ul",[a("li",[t._v("Ex: For "),a("strong",[t._v("quicksort")]),t._v("(uses pivot) on array\n"),a("ul",[a("li",[a("em",[t._v("Best case")]),t._v(" - "),a("code",[t._v("O(N)")]),t._v(" - If all items are same. It will travel just once. {Not much useful in reality.}")]),t._v(" "),a("li",[a("em",[t._v("Worst casr")]),t._v(" - O(N"),a("sup",[t._v("2")]),t._v(") - Pivot keeps changing. If at every change pivot is the largest number.")]),t._v(" "),a("li",[a("em",[t._v("Expected case")]),t._v(" - "),a("code",[t._v("O(N log N)")]),t._v(" - Best & Worst cases are rare.")]),t._v(" "),a("li",[a("em",[t._v("Worst = Expected")]),t._v(" - Almost all the time.")])])])])])]),t._v(" "),a("h2",{attrs:{id:"space-complexity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-complexity"}},[t._v("#")]),t._v(" Space Complexity")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("O(n)")]),t._v(" - array with n items")]),t._v(" "),a("li",[t._v("O(n"),a("sup",[t._v("2")]),t._v(") - 2D array with "),a("code",[t._v("n x n")]),t._v(" items")])]),t._v(" "),a("p",[a("em",[t._v("Stack space")]),t._v(" in recursive calls is counted")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Example 1 - Sum of 0 to n")])]),t._v(" "),a("ul",[a("li",[a("p",[a("em",[t._v("Time")]),t._v(" = "),a("code",[t._v("O(n)")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Space")]),t._v(" = "),a("code",[t._v("O(n)")]),t._v(" -> (Recursion uses stack)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Example 2 - Sum of 0 to n - But add adjacent items")])]),t._v(" "),a("ul",[a("li",[a("p",[a("em",[t._v("Time")]),t._v(" = "),a("code",[t._v("O(n)")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Space")]),t._v(" = "),a("code",[t._v("O(1)")]),t._v(" -> No stack and only 1 number is stored at a time")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"drop-the-constants-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drop-the-constants-o-1"}},[t._v("#")]),t._v(" Drop the constants ("),a("code",[t._v("O(1)")]),t._v(")")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("If specific inputs")]),t._v(" (depends on N)\n"),a("ul",[a("li",[a("code",[t._v("O(n)")]),t._v(" can be better than "),a("code",[t._v("O(1)")])]),t._v(" "),a("li",[a("em",[t._v("O(N"),a("sup",[t._v("2")]),t._v(")")]),t._v(" can be better than "),a("code",[t._v("O(N)")])])])]),t._v(" "),a("li",[t._v("So Big O is just description of "),a("em",[t._v("rate of increase")]),t._v(" if N increases.")]),t._v(" "),a("li",[t._v("This is why "),a("code",[t._v("O(1)")]),t._v(" is "),a("strong",[t._v("never counted in runtime.")]),t._v(" "),a("ul",[a("li",[t._v("Means "),a("code",[t._v("O(2N)")]),t._v(" is "),a("code",[t._v("O(N)")]),t._v(" - 2 is dropped")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 loop")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 loops")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"drop-the-non-dominant-terms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drop-the-non-dominant-terms"}},[t._v("#")]),t._v(" Drop the Non-Dominant terms")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Least -> Most")]),t._v(" "),a("ul",[a("li",[a("em",[t._v("(log N) < (N) < (N log N) < (N"),a("sup",[t._v("2")]),t._v(") < (2"),a("sup",[t._v("N")]),t._v(") < (N!)")])])])]),t._v(" "),a("li",[a("strong",[t._v("Examples")]),t._v(" "),a("ul",[a("li",[t._v("O(N+N) -> O(2N) -> O(N) (Drop 2)")]),t._v(" "),a("li",[t._v("O(N"),a("sup",[t._v("2")]),t._v(" + N) -> O(N"),a("sup",[t._v("2")]),t._v(") (Drop N which is not dominant)")]),t._v(" "),a("li",[t._v("O(N + Log N) -> O(N) -> O()")]),t._v(" "),a("li",[t._v("O(2"),a("sup",[t._v("N")]),t._v(" + 1000N"),a("sup",[t._v("100")]),t._v(") -> O(2"),a("sup",[t._v("N")]),t._v(")")]),t._v(" "),a("li",[t._v("O(B"),a("sup",[t._v("2")]),t._v(" + A) (Not dropped since cannot determine dominance)")])])])]),t._v(" "),a("h2",{attrs:{id:"multipart-algorithms-add-vs-multiply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multipart-algorithms-add-vs-multiply"}},[t._v("#")]),t._v(" Multipart algorithms - Add vs Multiply")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add ---\x3e O(A+B)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Multiply ----\x3e O(A*B)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// B")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"amortized-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amortized-time"}},[t._v("#")]),t._v(" Amortized time")]),t._v(" "),a("ul",[a("li",[t._v("Google it (maybe ignore it)")])]),t._v(" "),a("h2",{attrs:{id:"o-log-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-log-n"}},[t._v("#")]),t._v(" O(Log N)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Base of log dont matter for Big O.")])]),t._v(" "),a("li",[a("p",[t._v("Ex: In "),a("strong",[t._v("binary search")]),t._v(" tree when we divide the items into half for each iterations. This will take "),a("code",[t._v("O(log N)")]),t._v(" time.")]),t._v(" "),a("ul",[a("li",[t._v("If "),a("code",[t._v("N = 16")]),t._v(" then it takes max of 4 iterations to find a number - "),a("code",[t._v("1 -> 2 -> 4 -> 8 -> 16")]),t._v(" "),a("em",[t._v("(16/2 = 8, 8/2=4 .....)")])]),t._v(" "),a("li",[a("em",[t._v("2"),a("sup",[t._v("4")]),t._v(" = 16")]),t._v(" --\x3e "),a("em",[t._v("log"),a("sub",[t._v("2")]),t._v(" l6 = 4")])])])])]),t._v(" "),a("h2",{attrs:{id:"recursive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recursive"}},[t._v("#")]),t._v(" Recursive")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("Total function calls = Total nodes in nodetree")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Nodes(N) = Branches")]),a("sup",[a("code",[t._v("depth")])]),t._v(" = "),a("code",[t._v("2")]),a("sup",[a("code",[t._v("X")])])]),t._v(" "),a("li",[a("code",[t._v("16 = 2")]),a("sup",[a("code",[t._v("4")])]),t._v(" (in above ex)")]),t._v(" "),a("li",[a("code",[t._v("depth = x = log N")])])])]),t._v(" "),a("li"),t._v(" "),a("li",[a("p",[a("em",[t._v("Time")]),t._v(" = "),a("code",[t._v("O(N)")]),t._v(" = "),a("code",[t._v("O(branches")]),a("sup",[a("code",[t._v("depth")])]),t._v(")")]),t._v(" "),a("ul",[a("li",[t._v("Note - Often true but not always")]),t._v(" "),a("li",[t._v("If depth is unknown then `depth = log(N)")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Space")]),t._v(" = "),a("em",[t._v("O(depth)")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Memoizations")])]),t._v(" "),a("ul",[a("li",[t._v("In Fibonacci series instead of calculating all numbers again & again. We can store the each calculated value in array.")]),t._v(" "),a("li",[t._v("Use this stored values to calculate next value - "),a("code",[t._v("a[x] = a[x-1] + a[x-2]")])]),t._v(" "),a("li",[t._v("So even if recursive the stored value is returned ie a "),a("strong",[t._v("constant is returned")])]),t._v(" "),a("li",[a("strong",[t._v("Time")]),t._v(" = "),a("code",[t._v("O(N)")]),t._v(" [Reducing "),a("code",[t._v("N = 16")]),t._v(" ---\x3e "),a("code",[t._v("4")]),t._v(" ]")])])])]),t._v(" "),a("p",[t._v(".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.")]),t._v(" "),a("p",[t._v(".\n.")])])}),[],!1,null,null,null);s.default=e.exports}}]);