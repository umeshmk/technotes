(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{378:function(t,s,e){"use strict";e.r(s);var a=e(45),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"grokking-algorithms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grokking-algorithms"}},[t._v("#")]),t._v(" Grokking Algorithms")]),t._v(" "),e("blockquote",[e("p",[t._v('Src - Book "Grokking Algorithms"')]),t._v(" "),e("p",[e("strong",[t._v("Pseudo-code")]),t._v(" is just a mixture of code & speech together")])]),t._v(" "),e("h2",{attrs:{id:"introduction-to-algorithms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-algorithms"}},[t._v("#")]),t._v(" Introduction to algorithms")]),t._v(" "),e("h3",{attrs:{id:"binary-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-search"}},[t._v("#")]),t._v(" Binary search")]),t._v(" "),e("p",[t._v("Divide into half.")]),t._v(" "),e("ul",[e("li",[t._v("Input - sorted list")]),t._v(" "),e("li",[t._v("Output - index of item or null")]),t._v(" "),e("li",[t._v("Ex:- For "),e("code",[t._v("n")]),t._v(" inputs (say 100 inputs)\n"),e("ul",[e("li",[t._v("Simple search takes "),e("code",[t._v("O(n)")]),t._v(" (100 steps - worst case) "),e("code",[t._v("[1,2,3,4,5....]")])]),t._v(" "),e("li",[t._v("Binary search takes "),e("code",[t._v("O(log n)")]),t._v(" "),e("strong",[t._v("[log to base 2]")]),t._v(" (7 steps - worst case) "),e("code",[t._v("[50,75,63 .... ]")])])])]),t._v(" "),e("li",[t._v("Ex: - For 8 inputs\n"),e("ul",[e("li",[t._v("Simple search - 8 steps")]),t._v(" "),e("li",[t._v("Binary search - "),e("code",[t._v("log(8)")]),t._v(" ie 3 steps")])])])]),t._v(" "),e("vc-fiddle",{attrs:{url:"https://jsfiddle.net/68o7p539"}}),t._v(" "),e("h3",{attrs:{id:"big-o-running-time"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#big-o-running-time"}},[t._v("#")]),t._v(" Big O - Running Time")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Cases")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Best case")]),t._v(" — represented as Big Omega or "),e("code",[t._v("Ω(n)(n)")])]),t._v(" "),e("li",[e("strong",[t._v("Average case")]),t._v(" — represented as Big Theta or "),e("code",[t._v("Θ(n)(n)")])]),t._v(" "),e("li",[e("strong",[t._v("Worst case")]),t._v(" — represented as Big O Notation or "),e("code",[t._v("O(n)O(n)")])])])]),t._v(" "),e("ul",[e("li",[t._v("Execution Time is not important.")]),t._v(" "),e("li",[t._v("Number of Operation(O is Operations) & How it grows matters.\n"),e("ul",[e("li",[t._v("Ex: 100 inputs - Binary is 15 times faster than simple search")]),t._v(" "),e("li",[t._v("Ex: 1 Billion inputs - Binary is 33 million times faster than simple search")])])]),t._v(" "),e("li",[t._v("Big O always gives time needed for the "),e("strong",[t._v("worst-case")]),t._v(" scenario")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(1) - Hash tables [Constant time] (fastest)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(log(n)) - Binary [Logarithmic Time]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(n) - Simple [Linear Time]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(n log(n)) - Quicksort/mergesort")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(n^2) - Selection sort")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(n!) - Travelling salesperson (slowest)")]),t._v("\n")])])]),e("vc-img",{attrs:{url:"https://i.imgur.com/gSiuqpl.png",size:""}}),t._v(" "),e("h3",{attrs:{id:"big-o-complexity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#big-o-complexity"}},[t._v("#")]),t._v(" Big O complexity")]),t._v(" "),e("p",[t._v("In interview - "),e("em",[t._v("Find the Big O complexity of an algorithm ?")])]),t._v(" "),e("ul",[e("li",[t._v("Drop the leading constants")]),t._v(" "),e("li",[t._v("Ignore the lower order terms")])]),t._v(" "),e("p",[t._v("Example: "),e("code",[t._v("3n^3 + 4n + 2")]),t._v(" simplifies to "),e("code",[t._v("O(n^3)")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"selection-sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selection-sort"}},[t._v("#")]),t._v(" Selection sort")]),t._v(" "),e("h3",{attrs:{id:"how-memory-works"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-memory-works"}},[t._v("#")]),t._v(" How memory works")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Linked list")]),t._v(" store items randomly memory blocks\n"),e("ul",[e("li",[t._v("Better for insert/delete operations")]),t._v(" "),e("li",[t._v("Better in "),e("strong",[t._v("Sequential access")]),t._v(" we have to go from start to desired item since we don't know it's memory address.")])])]),t._v(" "),e("li",[e("strong",[t._v("Arrays")]),t._v(" store items in memory blocks contigously ie side-by-side\n"),e("ul",[e("li",[t._v("Better for "),e("strong",[t._v("Random access")]),t._v(" of items because we know the memory address.")])])])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/jTszBuk.png",size:"lg"}}),t._v(" "),e("h3",{attrs:{id:"selection-sort-o-n-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selection-sort-o-n-2"}},[t._v("#")]),t._v(" Selection sort - "),e("code",[t._v("O(n^2)")])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/ghHzONc.png",size:"xl"}}),t._v(" "),e("p",[t._v("Ex: Sorting a list of most played music artist")]),t._v(" "),e("vc-fiddle",{attrs:{url:"https://jsfiddle.net/vxr956b2/"}}),t._v(" "),e("h2",{attrs:{id:"recursion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recursion"}},[t._v("#")]),t._v(" Recursion")]),t._v(" "),e("ul",[e("li",[t._v("Loops are faster but Recursion is cleaner")]),t._v(" "),e("li",[t._v("2 Parts of "),e("em",[t._v("Recursive function")]),t._v(" "),e("ul",[e("li",[e("em",[t._v("Base case")]),t._v(" - function don't call itself (prevents infinite loop.)")]),t._v(" "),e("li",[e("em",[t._v("Recursion case")]),t._v(" - function call itself")])])])]),t._v(" "),e("h3",{attrs:{id:"stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Call stack")]),t._v(" - Recursion use stack for each function calls")]),t._v(" "),e("li",[t._v("Cons - takes too much memory for big stacks. "),e("em",[t._v("Use loop in such cases.")])])]),t._v(" "),e("vc-fiddle",{attrs:{url:"https://jsfiddle.net/osr65gwj/"}}),t._v(" "),e("h2",{attrs:{id:"quicksort-o-n-log-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quicksort-o-n-log-n"}},[t._v("#")]),t._v(" Quicksort - "),e("code",[t._v("O(n log(n))")])]),t._v(" "),e("blockquote",[e("p",[t._v("average case - "),e("code",[t._v("O(n log(n))")])]),t._v(" "),e("p",[t._v("worst case - "),e("code",[t._v("O(n^2)")])])]),t._v(" "),e("h3",{attrs:{id:"divide-and-conquer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#divide-and-conquer"}},[t._v("#")]),t._v(" Divide and conquer")]),t._v(" "),e("ul",[e("li",[t._v("A "),e("em",[t._v("Recursive technique")])]),t._v(" "),e("li",[t._v("Used by Quicksort")])]),t._v(" "),e("p",[t._v("First, figure out the base case\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/Tin5FUj.png",size:""}})],1),t._v(" "),e("p",[t._v("Now you need to figure out the recursive case. Reduced the problem from a 1680 × 640 farm to a 640 × 400 farm\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/OFnKq78.png",size:""}})],1),t._v(" "),e("p",[t._v("Let’s apply the same algorithm again.\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/TWCLouQ.png",size:""}})],1),t._v(" "),e("p",[t._v("Till you get Base case\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/UNXccGi.png",size:""}}),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/RKfPV8u.png",size:""}})],1),t._v(" "),e("h3",{attrs:{id:"quicksort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quicksort"}},[t._v("#")]),t._v(" Quicksort")]),t._v(" "),e("ul",[e("li",[e("em",[t._v("Base case")]),t._v(" for array - 0 or 1 element")]),t._v(" "),e("li",[t._v("Divide array using Recursion till base case is achieved.")])]),t._v(" "),e("vc-fiddle",{attrs:{url:"https://jsfiddle.net/80hLnj5m/1/"}}),t._v(" "),e("h3",{attrs:{id:"mergesort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mergesort"}},[t._v("#")]),t._v(" Mergesort")]),t._v(" "),e("blockquote",[e("p",[t._v("Always - "),e("code",[t._v("O(n log(n))")])])]),t._v(" "),e("ul",[e("li",[t._v("Both Quicksort & Mergesort have same "),e("code",[t._v("O(n log(n))")])]),t._v(" "),e("li",[e("strong",[t._v("Quicksort is still faster")]),t._v(" because the constant (which is ignored in Big O) is lower than Mergesort constant.")])]),t._v(" "),e("h2",{attrs:{id:"hash-tables-o-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash-tables-o-1"}},[t._v("#")]),t._v(" Hash Tables - "),e("code",[t._v("O(1)")])]),t._v(" "),e("ul",[e("li",[t._v("It has Key-value pairs")]),t._v(" "),e("li",[t._v("Hash tables = hash function + array")]),t._v(" "),e("li",[t._v("Every language has hash tables with different names - "),e("em",[t._v("hashmaps, maps, dictionaries, associative arrays")])]),t._v(" "),e("li",[t._v("Always "),e("code",[t._v("O(1)")]),t._v(" for any number of data. Worst case is "),e("code",[t._v("O(n)")]),t._v(" (due to Collisions)")]),t._v(" "),e("li",[t._v("EX - Phone numbers, cache, dns resolution, etc")]),t._v(" "),e("li",[t._v("Hash function EX - SHA, etc")])]),t._v(" "),e("h3",{attrs:{id:"hash-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash-function"}},[t._v("#")]),t._v(" Hash function")]),t._v(" "),e("ul",[e("li",[t._v("Converts string to Number. (String means any data ie stream of bytes)")]),t._v(" "),e("li",[t._v("Must be consistent ie same number for same string.")]),t._v(" "),e("li",[t._v("Must be different for different strings.")])]),t._v(" "),e("h3",{attrs:{id:"collisions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collisions"}},[t._v("#")]),t._v(" Collisions")]),t._v(" "),e("ul",[e("li",[t._v("Same value for different keys")]),t._v(" "),e("li",[e("em",[t._v("Load factor")]),t._v(" = items in array / total slots in array")]),t._v(" "),e("li",[e("em",[t._v("Resizing")]),t._v(" - Increase slots in array to avoid Collisions.")])]),t._v(" "),e("h2",{attrs:{id:"breadth-first-search-bfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#breadth-first-search-bfs"}},[t._v("#")]),t._v(" Breadth First Search (BFS)")]),t._v(" "),e("ul",[e("li",[t._v("A graph is set of "),e("em",[t._v("nodes and edges")]),t._v(" connecting them.")]),t._v(" "),e("li",[t._v("BFS is a graph algorithm")]),t._v(" "),e("li",[t._v("Its used to calculate "),e("em",[t._v("shortest path/distance")]),t._v(".")])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/EHpAwN3.png",size:""}}),t._v(" "),e("h3",{attrs:{id:"bfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bfs"}},[t._v("#")]),t._v(" BFS")]),t._v(" "),e("ul",[e("li",[t._v("Used for\n"),e("ol",[e("li",[t._v("Is there a path between node A & B ?")]),t._v(" "),e("li",[t._v("Whixh is shortest path between node A & B ?")])])])]),t._v(" "),e("p",[t._v("First degree will be searched first. Then second degree will be searched.\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/Mbipv1M.png",size:""}})],1),t._v(" "),e("h3",{attrs:{id:"queues"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queues"}},[t._v("#")]),t._v(" Queues")]),t._v(" "),e("ul",[e("li",[t._v("Only 2 operations - "),e("em",[t._v("Enqueue & Dequeue")])]),t._v(" "),e("li",[t._v("Queue - FIFO")]),t._v(" "),e("li",[t._v("Stack - LIFO")])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/TQiVRCO.png",size:""}}),t._v(" "),e("h3",{attrs:{id:"implementation-of-graph"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-of-graph"}},[t._v("#")]),t._v(" Implementation of Graph")]),t._v(" "),e("ul",[e("li",[t._v("We could use "),e("strong",[t._v("HashTables")]),t._v(" to Implement graphs.")])]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In python we could add graph like")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# order does not matter since it's hashmaps")]),t._v("\ngraph "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ngraph"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# root node")]),t._v("\ngraph"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AA1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AA2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# middle nodes")]),t._v("\ngraph"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AA1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# leaf node")]),t._v("\n")])])]),e("ul",[e("li",[e("em",[t._v("Directed graph")]),t._v(" - In "),e("code",[t._v("A --\x3e B")]),t._v(" B is A's neighbour not vice versa")]),t._v(" "),e("li",[e("em",[t._v("UnDirected graph")]),t._v(" - In "),e("code",[t._v("A -- B")]),t._v(" both A & B are each other's neighbours.")])]),t._v(" "),e("p",[t._v("Both this image are equivalent.\n"),e("vc-img",{attrs:{url:"https://i.imgur.com/b3yBYYK.png",size:""}})],1),t._v(" "),e("h3",{attrs:{id:"todo-implementing-the-algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo-implementing-the-algorithm"}},[t._v("#")]),t._v(" TODO - Implementing the algorithm")]),t._v(" "),e("ul",[e("li",[t._v("We need to create a queue and add each node to it.")]),t._v(" "),e("li",[t._v("First add root node, then it's children, then sub-children till we either reach leaf nodes or our search condition is satisfied.")]),t._v(" "),e("li",[t._v("No duplicate node - if a node is added/checked in queue then don't add again.")])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/IiL5Rwc.png",size:""}}),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO - add to queue")]),t._v("\n\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Big O")]),t._v(" "),e("p",[t._v("Running time - "),e("code",[t._v("O(vertices + edges)")])])]),t._v(" "),e("h2",{attrs:{id:"dijkstra-s-algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-s-algorithm"}},[t._v("#")]),t._v(" Dijkstra's algorithm")]),t._v(" "),e("ul",[e("li",[t._v("Use to find Fastest path.")]),t._v(" "),e("li",[t._v("Weighted edges in graph can be solved using Dijkstra.")]),t._v(" "),e("li",[t._v("In BFS we just find shortest path not fastest path")]),t._v(" "),e("li",[e("strong",[t._v("Graph Requirements")]),t._v(" "),e("ul",[e("li",[t._v("Directed graph")]),t._v(" "),e("li",[t._v("Weighted graph (no negative-weight edges - use "),e("em",[t._v("Bellman-Ford")]),t._v(" algorithm instead)")]),t._v(" "),e("li",[t._v("No cycles in graph")]),t._v(" "),e("li")])])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/8E5dKxd.png",size:""}}),t._v(" "),e("h3",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/9Tp4N6g.png",size:""}}),t._v(" "),e("p",[t._v("Also need a "),e("code",[t._v("proccessedNodes[]")]),t._v(" to avoid reprocessing nodes.")]),t._v(" "),e("p",[e("strong",[t._v("Algorithm")])]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/i0BfJdG.png",size:""}}),t._v(" "),e("vc-fiddle",{attrs:{url:"https://jsfiddle.net/fwazvnh1/4/"}}),t._v(" "),e("h2",{attrs:{id:"greedy-algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greedy-algorithm"}},[t._v("#")]),t._v(" Greedy algorithm")]),t._v(" "),e("ul",[e("li",[t._v("Don;t always work but are very simple to write and pretty close to perfect solution.")])]),t._v(" "),e("h2",{attrs:{id:"dynamic-programming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-programming"}},[t._v("#")]),t._v(" Dynamic programming")]),t._v(" "),e("ul",[e("li",[t._v("Solving hard problems")]),t._v(" "),e("li",[t._v("Breaks hard problem into smaller problems and solve them first.")])]),t._v(" "),e("h3",{attrs:{id:"knapsack-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#knapsack-problem"}},[t._v("#")]),t._v(" Knapsack problem")]),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/7D13hrr.png",size:""}}),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/4ClsGeW.png",size:""}}),t._v(" "),e("vc-img",{attrs:{url:"https://i.imgur.com/0Usj7UQ.png",size:""}}),t._v(" "),e("p",[t._v("4ClsGeW\n0Usj7UQ\n7D13hrr")])],1)}),[],!1,null,null,null);s.default=r.exports}}]);