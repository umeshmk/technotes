(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{456:function(e,v,i){"use strict";i.r(v);var _=i(45),l=Object(_.a)({},(function(){var e=this,v=e.$createElement,i=e._self._c||v;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"dockerfile"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),i("ul",[i("li",[i("p",[i("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reference"),i("OutboundLink")],1)])]),e._v(" "),i("li",[i("p",[i("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Best practices"),i("OutboundLink")],1)])]),e._v(" "),i("li",[i("p",[e._v("image is build using Dockerfile")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("docker build -tag <name> .")])]),e._v(" "),i("li",[i("code",[e._v("docker build -tag <name> -f <path/Dockerfile> .")])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v(".dockerignore")])]),e._v(" "),i("ul",[i("li",[e._v("build "),i("code",[e._v("context")]),e._v(" dir is where "),i("code",[e._v("docker build ...")]),e._v(" is executed")]),e._v(" "),i("li",[i("code",[e._v("Dockerfile")]),e._v(" is somewhere in context. Default is current dir. Use "),i("code",[e._v("-f")]),e._v(" flag for other path.")]),e._v(" "),i("li",[e._v("all files & folders are "),i("em",[e._v("sent to docker daemon")]),e._v(" as context [Regardless of Dockerfile path ]")]),e._v(" "),i("li",[e._v("some file & folders may not be used in build but still sent as build context.")]),e._v(" "),i("li",[e._v("So big context & big image size")]),e._v(" "),i("li",[e._v("can increase build,pull,push time & runtime size of containers")])])]),e._v(" "),i("li",[i("p",[e._v("clean apt cache by removing "),i("code",[e._v("/var/lib/apt/lists")])]),e._v(" "),i("ul",[i("li",[e._v("reduces the image size")])])]),e._v(" "),i("li",[i("p",[e._v("Use Single line -> each line creates a new image")]),e._v(" "),i("ul",[i("li",[e._v("use breakline "),i("code",[e._v("\\")]),e._v(" and sort alphabetically")]),e._v(" "),i("li",[i("code",[e._v("RUN apt-get update && apt-get install -y")]),e._v(" update & install on 1 line")]),e._v(" "),i("li",[i("code",[e._v('LABEL a="5" c="2"')])]),e._v(" "),i("li",[i("code",[e._v("RUN wget -O - http://some.site | wc -l > /number")]),e._v(" Use "),i("code",[e._v("|")]),e._v(" pipes")]),e._v(" "),i("li",[e._v("Separate lines for COPY is better.")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ENV PATH /usr/local/nginx/bin:$PATH")]),e._v(" will ensure that "),i("em",[e._v("CMD [“nginx”]")]),e._v(" just works")])])]),e._v(" "),i("hr"),e._v(" "),i("h1",{attrs:{id:"description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),i("ul",[i("li",[i("p",[i("code",[e._v("INSTRUCTION argument")]),e._v(" - not case-sensitive but UPPERCASE looks better")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("# directive=value")])]),e._v(" "),i("ul",[i("li",[e._v("Parser directive always at top even before "),i("code",[e._v("#comments")])]),e._v(" "),i("li",[e._v("not case-sensitive")]),e._v(" "),i("li",[e._v("a blank line after any directive")]),e._v(" "),i("li",[i("code",[e._v("\\")]),e._v(" for line continuation is WRONG")]),e._v(" "),i("li",[e._v("Same directive if more than 2 times is INVALID directive")]),e._v(" "),i("li",[e._v("invalid directive is treated as comment")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("#Comments")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("FROM")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("FROM <image>:<tag> AS <name>")])]),e._v(" "),i("li",[i("code",[e._v("FROM <image>@<digest> AS <name>")])]),e._v(" "),i("li",[i("em",[e._v("1st line")])]),e._v(" "),i("li",[i("em",[e._v("Only "),i("code",[e._v("ARG")]),e._v(" can come before this.")])]),e._v(" "),i("li",[e._v("can appear multiple times in single Dockerfile")]),e._v(" "),i("li",[e._v("default tag is "),i("em",[e._v("latest")])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("Escape")])]),e._v(" "),i("ul",[i("li",[e._v("default is Backslash _ \\ _")]),e._v(" "),i("li",[e._v("can use "),i("em",[e._v("backtick(useful for windows)")]),e._v(" using directive "),i("em",[e._v("[# escape=`]")])]),e._v(" "),i("li",[i("em",[e._v("[ \\ ] or [ ` ]")]),e._v(" Escape "),i("em",[e._v("Backslash & Backtick")])]),e._v(" "),i("li",[e._v("not working in "),i("code",[e._v("RUN")]),e._v(" except at end to break line")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ENV")])]),e._v(" "),i("ul",[i("li",[e._v("environment variables")]),e._v(" "),i("li",[e._v("can be used by: "),i("em",[e._v("[ADD COPY ENV EXPOSE FROM LABEL STOPSIGNAL USER VOLUME WORKDIR]")])]),e._v(" "),i("li",[i("code",[e._v("ENV <key> <value>")])]),e._v(" "),i("li",[i("code",[e._v("ENV <key>=<value> ....")])]),e._v(" "),i("li",[i("code",[e._v('ENV v1="hello" v2=hello\\ world\\ hii')]),e._v("[preferred since single cache layer]")]),e._v(" "),i("li",[i("code",[e._v("$variable")]),e._v(" or "),i("code",[e._v("${variable}")]),e._v(" or "),i("code",[e._v("${foo}_bar")])]),e._v(" "),i("li",[i("code",[e._v("\\$variable")]),e._v(" result is literal only")]),e._v(" "),i("li",[i("code",[e._v("${variable:-defaultvalue}")]),e._v(" "),i("ul",[i("li",[e._v("set: then "),i("code",[e._v("givenvalue")])]),e._v(" "),i("li",[e._v("not set: then value is "),i("code",[e._v("defaultvalue")])])])]),e._v(" "),i("li",[i("code",[e._v("${variable:+defaultvalue}")]),e._v(" "),i("ul",[i("li",[e._v("set: then "),i("code",[e._v("defaultvalue")])]),e._v(" "),i("li",[e._v("not set: then value is "),i("code",[e._v("empty string")]),e._v("\nENV abc=hello\nENV abc=bye def=$abc    # hello\nENV ghi=$abc # bye")])])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v(".dockerignore file")])]),e._v(" "),i("ul",[i("li",[i("p",[e._v("checked before docker build finds Dockerfile")])]),e._v(" "),i("li",[i("p",[e._v("during build prevents copying using "),i("code",[e._v("ADD")]),e._v(" & "),i("code",[e._v("COPY")])])]),e._v(" "),i("li",[i("p",[i("em",[e._v("f context root = root & working directory")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("foo/bar")]),e._v(" or "),i("code",[e._v("/foo/bar")]),e._v(" is same folder for "),i("code",[e._v(".dockerignore")])])])]),e._v(" "),i("li",[i("p",[e._v("matching is done using Go's filepath syntax")])]),e._v(" "),i("li",[i("p",[i("code",[e._v(". or ..")]),e._v(" is removed by Go")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("**")]),e._v(" wildcard string")])]),e._v(" "),i("li",[i("p",[e._v("eg:")]),e._v(" "),i("h1",{attrs:{id:"comment"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#comment"}},[e._v("#")]),e._v(" comment")]),e._v(" "),i("p",[i("em",[e._v("/temp")]),e._v(" #files & folders names start with temp is ignored from context root\n"),i("em",[e._v("/")]),e._v("/temp* # /somedir/subdir/temporary.txt is ignored\ntemp? # /tempa , /tempb is ignored\n**/*.go # files ending with .go in all directories including root\n*.md # all .md .....\n!Readme.md # ...... except this is ignored")])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ARG")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("ARG <varname>[=<default value>]")])]),e._v(" "),i("li",[e._v("user pass arg mentioned in Dockerfile\n"),i("ul",[i("li",[i("code",[e._v("docker build --build-arg <varname>=<value>")])])])]),e._v(" "),i("li",[e._v("user pass arg not mentioned in Dockerfile\n"),i("ul",[i("li",[e._v("a warning")])])]),e._v(" "),i("li",[e._v("0...n args per Dockerfile")]),e._v(" "),i("li",[e._v("Must be defined before using")]),e._v(" "),i("li",[e._v("If same name then "),i("code",[e._v("ENV")]),e._v(" overrides "),i("code",[e._v("ARG")])]),e._v(" "),i("li",[e._v("Persistance in image: "),i("code",[e._v("ARG")]),e._v(" [NOT] "),i("code",[e._v("ENV")]),e._v(" [YES]")]),e._v(" "),i("li",[e._v("predefined arguments\n"),i("ul",[i("li",[e._v("can be used without mentioning/defining it in Dockerfile")]),e._v(" "),i("li",[e._v("["),i("code",[e._v("HTTP_PROXY")]),e._v(", "),i("code",[e._v("http_proxy")]),e._v(", "),i("code",[e._v("HTTPS_PROXY")]),e._v(", "),i("code",[e._v("https_proxy")]),e._v(", "),i("code",[e._v("FTP_PROXY")]),e._v(", "),i("code",[e._v("ftp_proxy")]),e._v(", "),i("code",[e._v("NO_PROXY")]),e._v(", "),i("code",[e._v("no_proxy")]),e._v("]")]),e._v(" "),i("li",[i("code",[e._v("--build-arg HTTP_PROXY=http://user:pass@proxy.lon.example.com")])]),e._v(" "),i("li",[e._v("passed using "),i("em",[e._v("--build-arg")]),e._v(" "),i("ul",[i("li",[e._v("arg is "),i("em",[e._v("excluded in docker history")]),e._v(" & "),i("em",[e._v("not cached")])])])]),e._v(" "),i("li",[e._v("passed using "),i("em",[e._v("Dockerfile")]),e._v(" "),i("ul",[i("li",[e._v("arg is "),i("em",[e._v("included in history")]),e._v(" & "),i("em",[e._v("cached")]),e._v(" which results in "),i("code",[e._v("cache miss")]),e._v(" on first usage line")])])])])]),e._v(" "),i("li",[e._v("eg:\nARG VERSION=latest\nFROM base:${VERSION}")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("RUN")])]),e._v(" "),i("ul",[i("li",[e._v("run during build of image")]),e._v(" "),i("li",[i("code",[e._v("RUN <command>")])]),e._v(" "),i("li",[i("code",[e._v('RUN ["executable", "param1", "param2"]')]),e._v(" # double quotes")]),e._v(" "),i("li",[i("code",[e._v('RUN ["echo", "$HOME"]')]),e._v(" # $HOME is not resolved to value")]),e._v(" "),i("li",[i("code",[e._v('RUN ["sh", "-c", "echo $HOME"]')]),e._v("# Shell resolves $HOME nor Docker")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("CMD")])]),e._v(" "),i("ul",[i("li",[e._v("after build of image when container runs")]),e._v(" "),i("li",[e._v("Only 1 time in Dockerfile")]),e._v(" "),i("li",[e._v("If many times then last is used\n"),i("ul",[i("li",[e._v("can use "),i("em",[e._v("script.sh")]),e._v(" file")])])]),e._v(" "),i("li",[i("code",[e._v("CMD command param1 param2")])]),e._v(" "),i("li",[i("code",[e._v('CMD ["executable", "param1", "param2"]')])]),e._v(" "),i("li",[i("code",[e._v('CMD ["param1", "param2"]')]),e._v(" # If ENTRYPOINT is mentioned")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("LABEL")])]),e._v(" "),i("ul",[i("li",[e._v("metadata for image")]),e._v(" "),i("li",[e._v("multiple labels for a image")]),e._v(" "),i("li",[i("code",[e._v("LABEL <key>=<value> <key>=<value> <key>=<value>")])]),e._v(" "),i("li",[e._v("to add space in between words use escape [ \\ ] or quotes")]),e._v(" "),i("li",[i("code",[e._v('LABEL "com.example.vendor"="ACME"')])]),e._v(" "),i("li",[i("code",[e._v('LABEL version="2.1"')])]),e._v(" "),i("li",[i("code",[e._v('LABEL about="This is illustrates \\ breaking lines"')])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("MAINTAINER")])]),e._v(" "),i("ul",[i("li",[e._v("DEPRECATED")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("EXPOSE")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("EXPOSE <port> [<port>/<protocol>.....]")])]),e._v(" "),i("li",[e._v("TCP or UDP. TCP is default.")]),e._v(" "),i("li",[e._v("Port is not published")]),e._v(" "),i("li",[i("code",[e._v("docker network")]),e._v(" command creating network\n"),i("ul",[i("li",[e._v("for communication between containers")]),e._v(" "),i("li",[e._v("without expose or publish of special ports")]),e._v(" "),i("li",[e._v("because containers in same network can communicate using any port.")]),e._v(" "),i("li",[e._v("Conclusion: can expose or publish any port[not specific ports ]")])])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ADD")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("COPY")]),e._v(" is preferred")]),e._v(" "),i("li",[e._v("features like "),i("em",[e._v("tar extraction, URL")])]),e._v(" "),i("li",[e._v("use "),i("em",[e._v("wget")]),e._v(" or "),i("em",[e._v("curl")]),e._v(" to download files and not "),i("code",[e._v("ADD <url>")])]),e._v(" "),i("li",[e._v("2 forms\n"),i("ul",[i("li",[i("code",[e._v("ADD <src>.... <dest>")])]),e._v(" "),i("li",[i("code",[e._v('ADD ["<src>",.... "<dest>"]')]),e._v(" # If path has whitespace")])])]),e._v(" "),i("li",[e._v("copy files,folders,fileurls from "),i("src",[e._v(" to image's filesystem at "),i("dest",[i("ul",[i("li",[i("code",[e._v("ADD hom* /mydir/")]),e._v(' # adds all files starting with "hom"')]),e._v(" "),i("li",[i("code",[e._v("ADD hom?.txt /mydir/")]),e._v(' # ? is any random single character. eg "home.txt"')])])])],1)],1)])]),e._v(" "),i("li",[i("p",[i("code",[e._v("COPY")])]),e._v(" "),i("ul",[i("li",[e._v("basic copying")]),e._v(" "),i("li",[e._v("2 forms\n"),i("ul",[i("li",[i("code",[e._v("COPY <src>.... <dest>")])]),e._v(" "),i("li",[i("code",[e._v('COPY ["<src>",.... "<dest>"]')]),e._v(" # If path has whitespace")])])]),e._v(" "),i("li",[e._v("copy files,folders from "),i("src",[e._v(" to image's filesystem at "),i("dest",[i("ul",[i("li",[i("code",[e._v("COPY hom* /mydir/")]),e._v(' # adds all files starting with "hom"')]),e._v(" "),i("li",[i("code",[e._v("COPY hom?.txt /mydir/")]),e._v(' # ? is any random single character. eg "home.txt"')])])])],1)],1)])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ENTRYPOINT")])]),e._v(" "),i("ul",[i("li",[e._v("makes container as an executable")]),e._v(" "),i("li",[i("code",[e._v('ENTRYPOINT ["executable", "param1", "param2"]')]),e._v(" # exec-form is preferred")]),e._v(" "),i("li",[i("code",[e._v("ENTRYPOINT command param1 param2")]),e._v(" # shell-form")]),e._v(" "),i("li",[e._v("last mention of this command is used")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("VOLUME")])]),e._v(" "),i("ul",[i("li",[e._v("Recommended")]),e._v(" "),i("li",[i("code",[e._v('VOLUME ["/data"]')])]),e._v(" "),i("li",[i("code",[e._v("VOLUME /var/log")])]),e._v(" "),i("li",[i("code",[e._v("VOLUME /var/log /var/db")])]),e._v(" "),i("li",[e._v("creates mount point")]),e._v(" "),i("li",[e._v("In Dockerfile if volume is declared(mentioned in Dockerfile)\n"),i("ul",[i("li",[e._v("& then any build steps changes data within volume")]),e._v(" "),i("li",[e._v("then this "),i("em",[e._v("changes are discarded")])]),e._v(" "),i("li",[e._v("so make changes before creating(mentioned) volume")])])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("USER")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("USER <user>[:<group>]")])]),e._v(" "),i("li",[i("code",[e._v("USER <UID>[:<GID>]")])]),e._v(" "),i("li",[e._v("used when running image or for any "),i("code",[e._v("RUN")]),e._v(", "),i("code",[e._v("CMD")]),e._v(", "),i("code",[e._v("ENTRYPOINT")]),e._v(" that follows "),i("code",[e._v("user")]),e._v(" command")]),e._v(" "),i("li",[e._v("if user does not have primary group then image or next instruction will use root group")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("WORKDIR")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("WORKDIR /path/workdir")])]),e._v(" "),i("li",[e._v("For "),i("code",[e._v("RUN")]),e._v(", "),i("code",[e._v("CMD")]),e._v(", "),i("code",[e._v("ENTRYPOINT")]),e._v(", "),i("code",[e._v("copy")]),e._v(", "),i("code",[e._v("ADD")]),e._v(" that follows workdir")]),e._v(" "),i("li",[e._v("dir will be created if not found")]),e._v(" "),i("li",[e._v("can use only "),i("code",[e._v("ENV")]),e._v(" declared in Dockerfile\nENV DIRPATH /path\nWORKDIR $DIRPATH/$DIRNAME\nRUN pwd\n"),i("blockquote",[i("p",[e._v("o/p: /path/$DIRNAME")])])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("ONBUILD")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("ONBUILD [INSTRUCTION]")])]),e._v(" "),i("li",[e._v("Used as trigger when image is used as base image for other builds")]),e._v(" "),i("li",[e._v("useful to build other images using this image base")]),e._v(" "),i("li")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("STOPSIGNAL")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v("STOPSIGNAL signal")])])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("HEALTHCHECK")])])]),e._v(" "),i("li",[i("p",[i("code",[e._v("SHELL")])]),e._v(" "),i("ul",[i("li",[i("code",[e._v('SHELL ["executable", "parameters"]')])]),e._v(" "),i("li",[e._v("0...n times per Dockerfile")]),e._v(" "),i("li",[e._v("default shell used in Linux "),i("code",[e._v('["/bin/sh", "-c"]')])])])])]),e._v(" "),i("h3",{attrs:{id:"cheatsheet"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cheatsheet"}},[e._v("#")]),e._v(" Cheatsheet")]),e._v(" "),i("p",[e._v("FROM\nARG\nENV\nRUN\nCOPY\nEXPOSE\nCMD")])])}),[],!1,null,null,null);v.default=l.exports}}]);